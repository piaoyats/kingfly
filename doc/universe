1 Environment, Universes, and Mirrors如何理解？
  refer to http://docs.scala-lang.org/overviews/reflection/environment-universes-mirrors.html

  Environment， The reflection environment 主要有两种，运行时和编译时。

  为区分这两种环境，scala封装了相应的universe：
  scala.reflect.runtime.universe 对应 runtime reflection
  scala.reflect.macros.Universe f对应 compile-time reflection.
  universe提供了反射所需的基本概念（such as Types, Trees, and Annotations），所以在使用scla的反射时都需要引入对应的universe

  Mirrors，用于获取反射信息，分为两类：
  “Classloader” mirrors. These mirrors translate names to symbols (via methods staticClass/staticModule/staticPackage).

  “Invoker” mirrors. These mirrors implement reflective invocations (via methods MethodMirror.apply, FieldMirror.get, etc.). These “invoker” mirrors are the types of mirrors that are most commonly used.

  同时Mirrors 又分为运行时mirror 和 编译时mirror：

  运行时mirror ---
  The entry point to mirrors for use at runtime is via ru.runtimeMirror(<classloader>), where ru is scala.reflect.runtime.universe.
  The result of a scala.reflect.api.JavaMirrors#runtimeMirror call is a classloader mirror, of type scala.reflect.api.Mirrors#ReflectiveMirror, which can load symbols by name.
  A classloader mirror can create invoker mirrors (including scala.reflect.api.Mirrors#InstanceMirror, scala.reflect.api.Mirrors#MethodMirror, scala.reflect.api.Mirrors#FieldMirror, scala.reflect.api.Mirrors#ClassMirror, and scala.reflect.api.Mirrors#ModuleMirror).

  编译时mirror --- Compile-time mirrors make use of only classloader mirrors to load symbols by name.
  通过scala.reflect.macros.Context#mirror获取classloader mirrors. Typical methods which use classloader mirrors include
  scala.reflect.api.Mirror#staticClass,
  scala.reflect.api.Mirror#staticModule,
  scala.reflect.api.Mirror#staticPackage.
